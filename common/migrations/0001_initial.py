# Generated by Django 2.2.23 on 2021-06-20 00:57

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator', models.IntegerField(null=True, verbose_name='creator')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('modifier', models.IntegerField(null=True, verbose_name='modifier')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified at')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
            ],
            options={
                'db_table': 'library_college',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('creator', models.IntegerField(null=True, verbose_name='creator')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('modifier', models.IntegerField(null=True, verbose_name='modifier')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified at')),
                ('avatar', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Avatar')),
                ('nickname', models.CharField(blank=True, max_length=200, null=True, verbose_name='Nickname')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown')], default='Unknown', max_length=200, null=True, verbose_name='Gender')),
                ('student_id', models.CharField(blank=True, max_length=30, null=True, verbose_name='Student ID')),
                ('major', models.CharField(blank=True, max_length=200, null=True, verbose_name='Major')),
                ('admission_at', models.DateField(blank=True, default=None, null=True, verbose_name='Admission at')),
                ('role', models.CharField(blank=True, choices=[('Admin', 'Admin'), ('Librarian', 'Librarian'), ('Reader', 'Reader')], max_length=200, null=True, verbose_name='Role')),
                ('college', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_college', to='common.College', verbose_name='College')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'library_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
